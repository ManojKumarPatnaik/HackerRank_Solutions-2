// ////////////////////////////////////////////////////////
// # Title
// Largest product in a series
//
// # URL
// https://projecteuler.net/problem=8
// http://euler.stephan-brumme.com/8/
//
// # Problem
// The four adjacent digits in the 1000-digit number that have the greatest product are `9 * 9 * 8 * 9 = 5832`.
//
// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450
//
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
// What is the value of this product?
//
// # Solved by
// Stephan Brumme
// February 2017
//
// # Algorithm
// Starting at each position where at least 13 digits (variable ''span'') can be found,
// a loop goes through those 13 digits and:
// 1. convert each digit from ASCII to numeric: ''numeric = ascii - '0' ''
// 2. multiply all those converted digits
// 3. if product is higher than before: keep it
//
// # Alternative
// If ''span'' is large, then an incremental approach might be useful:
// instead of multiplying all digits over and over again, we re-use a large portion of last iteration's product.
// Let's pretend our sequences contains just 4 elements:
// `product_0=x_0*x_1*x_2*x_3`
// then
// `product_1=x_1*x_2*x_3*x_4=product_0*x_4/x_0`
//
// This reduces O-complexity from O(mn) to O(n).
//
// # I/O
// echo "1 1000 13 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450" | ./euler-0008

#include <iostream>
#include <string>

int main()
{
  unsigned int tests;
  std::cin >> tests;
  while (tests--)
  {
    // length of string
    unsigned int length;
    // number of relevant consecutive digits
    unsigned int span;
    // read number as a string
    std::string number;
    std::cin >> length >> span >> number;

    // results can be much bigger than 32 bits ... but 64 bits are enough, though
    unsigned long long best = 0;
    // loop ends when there are less than "span" digits left
    for (int start = 0; start + span < length; start++)
    {
      unsigned long long current = 1;
      // convert digits from ASCII to numbers and multiply
      for (unsigned int i = 0; i < span; i++)
        current *= number[start + i] - '0';

      // better than before ?
      if (best < current)
        best = current;
    }

    std::cout << best << std::endl;
  }
  return 0;
}
